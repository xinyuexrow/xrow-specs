#!/bin/bash
#
# eZ Find Solr init script for RHEL and CENTOS.
#
# chkconfig: 2345 92 08
# description: eZ Find Solr indexing server

source /etc/rc.d/init.d/functions


if [ -f /etc/sysconfig/ezfind ]; then
        . /etc/sysconfig/ezfind
fi

# Start httpd in the C locale by default.
JAVA_HOME=${JAVA_HOME-"/usr"}
SOLR_HOME=${SOLR_HOME-"/usr/share/ezfind"}
CORES=${CORES-"ezp-default"}
DATA_DIR=${DATA_DIR-"/var/ezfind"}
PARAMETERS=${PARAMETERS-""}
#Example Slave Config
#PARAMETERS=" -Denable.master=false -Denable.slave=true -Dsolr.master.url=http://hostname:8983/solr/replication"


function makeCores {
 rm -Rf $DATA_DIR/java
 mkdir -p $DATA_DIR/cores/
 ln -s /usr/share/ezfind $DATA_DIR/java
 rm -Rf $DATA_DIR/cores/lib
 ln -s $SOLR_HOME/solr/lib $DATA_DIR/cores/
 echo "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>" > $DATA_DIR/cores/solr.xml
 echo "<solr persistent=\"true\" sharedLib=\"lib\">" >> $DATA_DIR/cores/solr.xml
 echo "<cores adminPath=\"/admin/cores\">" >> $DATA_DIR/cores/solr.xml
 for CORE in $@; do
  mkdir -p $DATA_DIR/cores/$CORE
  echo " <core name=\"$CORE\" instanceDir=\"$DATA_DIR/cores/$CORE\" />" >> $DATA_DIR/cores/solr.xml
  mkdir -p $DATA_DIR/cores/$CORE/data
  rm -Rf $DATA_DIR/cores/$CORE/conf
  mkdir -p $DATA_DIR/cores/$CORE/conf
  cp -R $SOLR_HOME/solr/ezp-default/conf/* $DATA_DIR/cores/$CORE/conf
  cp -R $SOLR_HOME/solr/ezp-default/conf/* $DATA_DIR/cores/$CORE/
  sed -i "s@<dataDir>\${solr.data.dir:}</dataDir>@<dataDir>$DATA_DIR/cores/$CORE/data</dataDir>@g" $DATA_DIR/cores/$CORE/conf/solrconfig.xml
  sed -i "s@00:00:10@00:00:60@g"  $DATA_DIR/cores/$CORE/conf/solrconfig.xml
  sed -i 's@<str name=\"masterUrl\">.*@<str name=\"masterUrl\">${solr.master.url}'"$CORE"'</str>@g' $DATA_DIR/cores/$CORE/conf/solrconfig.xml
  sed -i 's@<str name=\"confFiles\">.*@<str name=\"confFiles\">schema.xml,elevate.xml,stopwords.txt</str>@g' $DATA_DIR/cores/$CORE/conf/solrconfig.xml
 done
 echo "</cores>" >> $DATA_DIR/cores/solr.xml
 echo "</solr>" >> $DATA_DIR/cores/solr.xml
 chown -R ezfind:ezfind $DATA_DIR/cores/
 return 0; }

serviceNameLo="ezfind"                                 # service name with the first letter in lowercase
serviceName="eZ Find"                                  # service name
serviceUser="ezfind"                                   # OS user name for the service
serviceGroup="ezfind"                                  # OS group name for the service
applDir="/usr/share/ezfind"                            # home directory of the service application

if [ -n "$CORES" ]; then
  makeCores $CORES
  SOLR_HOME="${DATA_DIR}/cores"
fi

serviceUserHome="/var/$serviceUser"                    # home directory of the service user
serviceLogFile="/var/log/ezfind/solr.log"              # log file for StdOut/StdErr
maxShutdownTime=15                                     # maximum number of seconds to wait for the daemon to terminate normally
pidFile="/var/run/$serviceNameLo.pid"                  # name of PID file (PID = process ID number)
javaCommand="java"                                     # name of the Java launcher without the path
javaExe="$JAVA_HOME/bin/$javaCommand"                  # file name of the Java application launcher executable
javaArgs="-Dsolr.solr.home=${SOLR_HOME} -Djetty.home=${SOLR_HOME} -Dsolr.data.dir=${DATA_DIR} ${PARAMETERS} -jar $applDir/start.jar"  # arguments for Java launcher
javaCommandLine="$javaExe $javaArgs"                   # command line to start the Java service application
javaCommandLineKeyword="start.jar"                     # a keyword that occurs on the commandline, used to detect an already running service process and to distinguish it from others

# Makes the file $1 writable by the group $serviceGroup.
function makeFileWritable {
   local filename="$1"
   touch $filename || return 1
   chgrp $serviceGroup $filename || return 1
   chown $serviceGroup $filename || return 1
   chmod g+w $filename || return 1
   return 0; }

# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
   local pid="$1"
   if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
   if [ ! -e /proc/$pid ]; then return 1; fi
   return 0; }

# Returns 0 if the process with PID $1 is our Java service process.
function checkProcessIsOurService {
   local pid="$1"
   if [ "$(ps -p $pid --no-headers -o comm)" != "$javaCommand" ]; then return 1; fi
   grep -q --binary -F "$javaCommandLineKeyword" /proc/$pid/cmdline
   if [ $? -ne 0 ]; then return 1; fi
   return 0; }

# Returns 0 when the service is running and sets the variable $pid to the PID.
function getServicePID {
   if [ ! -f $pidFile ]; then return 1; fi
   pid="$(<$pidFile)"
   checkProcessIsRunning $pid || return 1
   checkProcessIsOurService $pid || return 1
   return 0; }

function startServiceProcess {
   cd $applDir || return 1
   rm -f $pidFile
   makeFileWritable $pidFile || return 1
   makeFileWritable $serviceLogFile || return 1
   cmd="nohup $javaCommandLine >>$serviceLogFile 2>&1 & echo \$! >$pidFile"
   su -m $serviceUser -s $SHELL -c "$cmd" || return 1
   sleep 0.1
   pid="$(<$pidFile)"
   if checkProcessIsRunning $pid; then :; else
      echo -ne "\n$serviceName start failed, see logfile."
      return 1
   fi
   return 0; }

function stopServiceProcess {
   kill $pid || return 1
   for ((i=0; i<maxShutdownTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
   kill -s KILL $pid || return 1
   local killWaitTime=15
   for ((i=0; i<killWaitTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
   return 1; }

function startService {
   getServicePID
   if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
   echo -n "Starting $serviceName   "
   startServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "started PID=$pid"
   RETVAL=0
   return 0; }

function stopService {
   getServicePID
   if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; RETVAL=0; echo ""; return 0; fi
   echo -n "Stopping $serviceName   "
   stopServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "stopped PID=$pid"
   RETVAL=0
   return 0; }

function checkServiceStatus {
   echo -n "Checking for $serviceName:   "
   if getServicePID; then
        echo "running PID=$pid"
        RETVAL=0
   else
        echo "stopped"
        RETVAL=3
   fi
   return 0; }

function main {
   RETVAL=0
   case "$1" in
      start)                                               # starts the Java program as a Linux service
         startService
         ;;
      stop)                                                # stops the Java program service
         stopService
         ;;
      restart)                                             # stops and restarts the service
         stopService && startService
         ;;
      status)                                              # displays the service status
         checkServiceStatus
         ;;
      *)
         echo "Usage: $0 {start|stop|restart|status}"
         exit 1
         ;;
      esac
   exit $RETVAL
}

main $1
